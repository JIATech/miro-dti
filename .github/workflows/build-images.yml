name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    # También puedes agregar más branches si usas otro nombre como master, develop, etc.

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # Verificar archivos necesarios en cada directorio
      - name: Verify necessary files
        run: |
          echo "Verificando archivos necesarios en cada directorio..."
          
          # Comprobar PWA
          if [ -d "pwa" ]; then
            echo "Verificando directorio pwa..."
            if [ ! -f "pwa/package.json" ]; then
              echo "ADVERTENCIA: No se encontró package.json en pwa"
              touch pwa/package.json
            fi
            if [ ! -f "pwa/package-lock.json" ]; then
              echo "ADVERTENCIA: No se encontró package-lock.json en pwa"
              echo "{}" > pwa/package-lock.json
            fi
          fi
          
          # Comprobar Signaling
          if [ -d "signaling" ]; then
            echo "Verificando directorio signaling..."
            if [ ! -f "signaling/package.json" ]; then
              echo "ADVERTENCIA: No se encontró package.json en signaling"
              touch signaling/package.json
            fi
            if [ ! -f "signaling/package-lock.json" ]; then
              echo "ADVERTENCIA: No se encontró package-lock.json en signaling"
              echo "{}" > signaling/package-lock.json
            fi
          fi
          
          # Comprobar Admin
          if [ -d "admin" ]; then
            echo "Verificando directorio admin..."
            if [ ! -f "admin/package.json" ]; then
              echo "ADVERTENCIA: No se encontró package.json en admin"
              touch admin/package.json
            fi
            if [ ! -f "admin/package-lock.json" ]; then
              echo "ADVERTENCIA: No se encontró package-lock.json en admin"
              echo "{}" > admin/package-lock.json
            fi
          fi
      
      # Verificar y corregir el directorio mirotalksfu
      - name: Check mirotalksfu directory
        run: |
          echo "Verificando directorio mirotalksfu..."
          if [ ! -d "mirotalksfu" ]; then
            echo "El directorio mirotalksfu no existe, clonando desde el repositorio..."
            # Cloning the main branch explicitly and with full depth to ensure we get all files
            git clone --depth 1 https://github.com/miroslavpejic85/mirotalksfu.git mirotalksfu
            
            echo "Verificando la estructura del repositorio clonado..."
            ls -la mirotalksfu/
          else
            echo "Directorio mirotalksfu existe, verificando contenido..."
            ls -la mirotalksfu/
          fi
          
          echo "Verificando Dockerfile en mirotalksfu..."
          if [ ! -f "mirotalksfu/Dockerfile" ]; then
            echo "ADVERTENCIA: No se encontró Dockerfile en mirotalksfu, intentando solucionar..."
            
            # Si no existe Dockerfile, verificar si está en otra ubicación o crear uno basado en la configuración local
            if [ -f "signaling/Dockerfile" ]; then
              echo "Usando Dockerfile de signaling como referencia..."
              cp signaling/Dockerfile mirotalksfu/Dockerfile
              echo "Dockerfile copiado a mirotalksfu/"
            else
              echo "Creando Dockerfile básico para mirotalksfu..."
              # Crear un Dockerfile básico y simple
              echo "FROM node:22-slim" > mirotalksfu/Dockerfile
              echo "WORKDIR /src" >> mirotalksfu/Dockerfile
              echo "ENV MEDIASOUP_SKIP_WORKER_PREBUILT_DOWNLOAD=true" >> mirotalksfu/Dockerfile
              echo "RUN apt-get update && apt-get install -y --no-install-recommends build-essential python3 python3-pip ffmpeg wget && rm -rf /var/lib/apt/lists/*" >> mirotalksfu/Dockerfile
              
              # Primero copiar package*.json para aprovechar el caché de Docker
              echo "COPY package*.json ./" >> mirotalksfu/Dockerfile
              
              # Usar npm ci en lugar de npm install para garantizar instalaciones deterministas
              echo "RUN npm ci" >> mirotalksfu/Dockerfile
              
              # Luego copiar el resto del código fuente
              echo "COPY . ." >> mirotalksfu/Dockerfile
              
              # Crear directorios necesarios
              echo "RUN mkdir -p app/rec app/logs" >> mirotalksfu/Dockerfile
              
              echo "EXPOSE 3010" >> mirotalksfu/Dockerfile
              echo "CMD [\"npm\", \"start\"]" >> mirotalksfu/Dockerfile
              echo "Dockerfile básico creado en mirotalksfu/"
            fi
          fi
          
          echo "Contenido del directorio mirotalksfu:"
          ls -la mirotalksfu/
          
          echo "Contenido del Dockerfile:"
          cat mirotalksfu/Dockerfile
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      # Construir y publicar PWA
      - name: Build and push PWA image
        uses: docker/build-push-action@v4
        with:
          context: ./pwa
          push: true
          tags: dtiteam/intercom-pwa:latest
      
      # Construir y publicar Signaling
      - name: Build and push Signaling image
        uses: docker/build-push-action@v4
        with:
          context: ./signaling
          push: true
          tags: dtiteam/intercom-signaling:latest
          build-args: |
            NODE_ENV=production
          no-cache: false
      
      # Construir y publicar Admin
      - name: Build and push Admin image
        uses: docker/build-push-action@v4
        with:
          context: ./admin
          push: true
          tags: dtiteam/intercom-admin:latest
      
      # Preparar Dockerfile temporal para MiroTalkSFU
      - name: Prepare MiroTalkSFU Dockerfile
        run: |
          cd mirotalksfu
          echo "Creando Dockerfile.github con modificaciones..."
          
          # Verificar patrones a reemplazar
          if grep -q "groupadd -r mirotalk -g 1000" Dockerfile; then
            echo "Modificando patrón de creación de grupo..."
            sed 's/groupadd -r mirotalk -g 1000/getent group mirotalk || groupadd -r mirotalk || groupadd -r mirotalk/' Dockerfile > Dockerfile.github
          else
            echo "Patrón de grupo no encontrado, copiando archivo original..."
            cp Dockerfile Dockerfile.github
          fi
          
          if grep -q "useradd -u 1000 -r -g mirotalk" Dockerfile.github; then
            echo "Modificando patrón de creación de usuario..."
            sed -i 's/useradd -u 1000 -r -g mirotalk/getent passwd mirotalk || useradd -r -g mirotalk || useradd -r -g mirotalk/' Dockerfile.github
          fi
          
          echo "Contenido del Dockerfile.github:"
          cat Dockerfile.github
      
      # Construir y publicar MiroTalkSFU con el Dockerfile modificado
      - name: Build and push MiroTalkSFU image
        uses: docker/build-push-action@v4
        with:
          context: ./mirotalksfu
          file: ./mirotalksfu/Dockerfile.github
          push: true
          tags: dtiteam/intercom-mirotalksfu:latest
          build-args: |
            NODE_ENV=production
            MEDIASOUP_SKIP_WORKER_PREBUILT_DOWNLOAD=true
          no-cache: true
