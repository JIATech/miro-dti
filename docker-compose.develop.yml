version: '3.8'

networks:
  intercom-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local

services:
  pwa:
    build: 
      context: ./pwa
      dockerfile: Dockerfile
    image: dtiteam/intercom-pwa:dev
    container_name: intercom-pwa
    restart: unless-stopped
    ports:
      - "${PWA_PORT:-80}:80"
    networks:
      - intercom-network
    depends_on:
      - signaling
      - mirotalksfu
    environment:
      - NODE_ENV=development
      # Valores para desarrollo
      - LOCAL_SFU_URL=http://mirotalksfu:8080
      - FALLBACK_SFU_URL=${FALLBACK_SFU_URL:-http://localhost:8080}
      - SIGNALING_URL=http://signaling:3000
    volumes:
      # Montaje para desarrollo que permite editar archivos sin reconstruir
      - ./pwa:/usr/share/nginx/html
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  signaling:
    build: 
      context: ./signaling
      dockerfile: Dockerfile
    image: dtiteam/intercom-signaling:dev
    container_name: intercom-signaling
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - SIGNALING_PORT=${SIGNALING_PORT:-3000}
      # Conexión con MongoDB
      - MONGO_URI=mongodb://mongodb:27017/intercom
      - MONGO_DB_NAME=intercom
      # Habilitar para conexión con la PWA
      - CORS_ORIGIN=*
    ports:
      - "${SIGNALING_PORT:-3000}:3000"
    networks:
      - intercom-network
    depends_on:
      - mongodb
    volumes:
      # Montaje para desarrollo que permite editar código sin reconstruir
      - ./signaling:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  mirotalksfu:
    build: 
      context: ./mirotalksfu
      dockerfile: Dockerfile
    image: dtiteam/intercom-mirotalksfu:dev
    container_name: intercom-mirotalksfu
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      # Configuración de servidor local (para desarrollo)
      - LOCAL_SFU_ENABLED=true
      - LOCAL_SFU_IP=${LOCAL_IP:-192.168.1.100}
      - LOCAL_SFU_PORT=${SFU_PORT:-8080}
      - LOCAL_SFU_LISTEN_IP=0.0.0.0
      - LOCAL_SFU_MIN_PORT=${SFU_MIN_PORT:-40000}
      - LOCAL_SFU_MAX_PORT=${SFU_MAX_PORT:-40100}
      # Configuración del servidor fallback (simplificada para dev)
      - FALLBACK_SFU_ENABLED=false
      # Compatibilidad con variables antiguas
      - SFU_PORT=${SFU_PORT:-8080}
      - SFU_MIN_PORT=${SFU_MIN_PORT:-40000}
      - SFU_MAX_PORT=${SFU_MAX_PORT:-40100}
      - SFU_LISTEN_IP=0.0.0.0
      # Valores para configuración activa
      - SFU_PUBLIC_IP=${LOCAL_IP:-192.168.1.100}
      # Seguridad
      - API_KEY_SECRET=intercom_dev_api_secret
      - JWT_KEY=intercom_dev_jwt_secret
    ports:
      - "${SFU_PORT:-8080}:8080/tcp"
      - "${SFU_MIN_PORT:-40000}-${SFU_MAX_PORT:-40100}:${SFU_MIN_PORT:-40000}-${SFU_MAX_PORT:-40100}/udp"
    networks:
      - intercom-network
    volumes:
      # Volúmenes para grabaciones y desarrollo
      - ./mirotalksfu/app/rec:/src/app/rec
      - ./mirotalksfu/app:/src/app
      - ./mirotalksfu/public:/src/public
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  admin:
    build: 
      context: ./admin
      dockerfile: Dockerfile
    image: dtiteam/intercom-admin:dev
    container_name: intercom-admin
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - ADMIN_PORT=${ADMIN_PORT:-8090}
      - ADMIN_USER=${ADMIN_USER:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - LOCAL_IP=${LOCAL_IP:-192.168.1.100}
      # Conexión con MongoDB
      - MONGO_URI=mongodb://mongodb:27017/intercom
      - MONGO_DB_NAME=intercom
    ports:
      - "${ADMIN_PORT:-8090}:8090"
    networks:
      - intercom-network
    depends_on:
      - mongodb
      - pwa
      - signaling
      - mirotalksfu
    volumes:
      # Montaje para desarrollo que permite editar código sin reconstruir
      - ./admin:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  mongodb:
    image: mongo:5.0
    container_name: intercom-mongodb-dev
    restart: unless-stopped
    command: mongod --wiredTigerCacheSizeGB 0.5 --bind_ip_all
    networks:
      - intercom-network
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    environment:
      # Para entorno de desarrollo, sin autenticación
      - MONGO_INITDB_DATABASE=intercom
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
